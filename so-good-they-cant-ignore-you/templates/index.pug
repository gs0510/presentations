//- Use the presentation layout so we can keep this clean
extends layouts/presentation

block append config
  -
    config.theme = 'lengstorf';
    config.title = 'Make the Right Thing the Easy Thing';
    config.description = 'How to Design Systems and Processes Teams Actually Follow';

    config.author = {
      name: 'Jason Lengstorf',
      email: 'jason@lengstorf.com',
      link: 'https://lengstorf.com/',
      twitter: 'jlengstorf',
      github: 'jlengstorf',
    };
    
    config.slides = {
      link: 'https://git.io/right-thing-easy-thing',
    };

    config.conference = {
      hashtag: '',
      twitter: '',
    };
  -

//- Add your slides here. See templates/includes/_mixins.pug for information 
//- on how `+slide` works.
block slides
  +slide
    h1(style="font-size: 80px; width: 110%; margin-left: -5%; margin-top: 80px;")= config.title
    h3(style="font-size: 40px; width: 110%; margin-left: -5%;")= config.description
    
    p by 
      a(href= config.author.link)= config.author.name
      br
      small
        a(href= `https://twitter.com/${config.author.twitter}`)= `@${config.author.twitter}`
        | &nbsp; · &nbsp;
        a(href= `mailto:${config.author.email}`)= config.author.email
    
    p
      small Slides: #[a(href= config.slides.link)= config.slides.link.replace('https://', '')]
    
  +slide
    h1
      span.hugify Team work
  
  +slide
    h2
      //- As lead developers, 
      span.hugify.alright-calm-down-a-little it’s our job
      span(style="display: block; font-size: 113%") to keep our team 
      em(style="font-size: 237%") running
    
    aside.notes.
      As lead developers, we’re the glue holding our teams together. We provide
      support, leadership, and mentoring to our team members. Our managers and
      other non-technical leadership rely on us to keep the wheels on.


  +slide
    h3 When the pressure is on
      br
      span.fragment we have two choices
    div(style="display: flex; justify-content: space-between;")
      div.fragment(style="width: 45%")
        img(
          src="./images/make-the-right-thing-the-easy-thing/wintergatan.webp"
          alt="Wintergatan, a complex, marble-powered musical instrument."
          style="display: block;"
        )
        h4 Fix the process
      div.fragment(style="width: 45%")
        img(
          src="./images/make-the-right-thing-the-easy-thing/smurfs.webp"
          alt="Smurf being a hero."
          style="display: block;"
        )
        h4 Fix the problem
    
    aside.notes.
      When deadline pressure is on and our team is struggling to keep up, we
      have two options to get us across the finish line: 1) we can figure out
      what’s slowing down the team and try to fix that, or 2) we can be the
      rockstar developer every recruiter dreams of and single-handedly solve
      the problem.

  +slide
    h2 Being the team’s
      em.hugify rockstar
      | feels 
      span.underlined really
      |  good
    
    aside.notes.
      It feels great to be the hero: you pull off a miracle and finish the
      project on time; your team is relieved and grateful; your manager is
      happy; it typically leads to public praise and potentially promotions,
      raises, and other rewards.
  
  +slide
    h2 Being the team’s
      strong.hugify auditor
      | feels... less good
    
    aside.notes.
      Digging into the underlying causes of team inefficiencies isn’t typically
      considered a good time. It’s hard to communicate the business value of it,
      and typically management will push back if you try to focus on underlying
      problems instead of putting out immediate fires. There are not usually
      rewards, recognition, or even gratitude for pursuing this option. This is
      not glamorous or high-profile work.
  
  +slide
    h2 There’s just one
      strong.hugify problem

  +slide
    h2
      span.hugify.alright-calm-down-a-little Rockstars
      | don’t get 
      span.underlined days off
    
    aside.notes.
      If you’re the only reason your team hits its deadlines, that makes it
      pretty tough to take a vacation.
  
  +slide.light-text.dim(
    data-background-image="./images/make-the-right-thing-the-easy-thing/bus.gif"
  )
    h2 What is your code’s
      span(style="display: block; font-size: 170%") bus factor?

    aside.notes.
      It’s common to hear developers talk about the “bus factor” — also called
      the “truck number” or “lottery number” — of a given codebase. It’s 
      intended to point out the fragility of a project: how many people have to
      get hit by a bus before no one is left that knows how it works?
      #[br]#[br]
      That feels a little too negative and alarmist to me, though. So what about
      a more positive (and realistic) term for it?

  +slide.light-text.dim(data-background-image="./images/make-the-right-thing-the-easy-thing/vacation.webp")
    h2 What is your code’s
      span.underlined(style="display: block; font-size: 210%; line-height: 0.9") vacation
      span(style="display: block; font-size: 170%") tolerance?

    aside.notes.
      On any team, we need everyone to have the ability to take time off. So
      instead of talking about the bus factor, talk about how easily any given
      person can go on vacation. Could two people go on vacation without
      stalling the rest of the team? Ideally, every team member should be pretty
      effective even if the entire team took time off.

  +slide
    h2 The problem with
      span(style="display: block; font-size: 170%") #[strong rockstars]:
    ul
      li.fragment They become bottlenecks
      li.fragment They create dependent teams
      li.fragment They build knowledge silos
      li.fragment They eventually leave
    
    aside.notes.
      If the rockstar is carrying most of the weight for a team, that means
      that work bottlenecks around the rockstar. Typically, teams start to
      automatically defer to the rockstar, which means there are fewer people
      taking initiative; instead, they respond to pretty much everything with,
      “You’d have to check with _________.” And because of that dependency, team
      members allow the rockstar to become the team’s source of truth — that’s a
      huge problem, because when the rockstar eventually burns out and quits (or
      retires, or gets transferred or promoted), all of that knowledge goes
      with them.

  +slide
    h2(style="font-size: 6.5rem") We need to do
      em(style="display: block; font-size: 220%; line-height: 0.8") better
      | for our teams

  +slide
    h1
      span(style="font-size: 46%") We need to fix the
      em.hugify(style="margin-top: 0.05em; line-height: 0.7") real
      | problem
    aside.notes.
      Yes, it’s not all that glamorous, but if we really want to create teams
      that run well, we need to fix the underlying problems that created a need
      for a rockstar in the first place.

  +slide
    h1
      span(style="font-size: 65%") We need to create a
      em(style="display: block; font-size: 170%") Process

  +slide
    h4 ...wait, what?

  +slide
    h3 What 
      span.underlined slows teams down
      | ?
    ul
      li.fragment Lack of confidence in ability, knowledge, or autonomy
      li.fragment Lack of clarity about the goal of a given project

    aside.notes.
      When teams run poorly, in my experience that largely comes from people
      either lacking confidence — they’re not confident they know how to do the
      thing, they’re not confident they’re allowed to do the thing without
      sign-off, they’re not confident that someone else on the team won’t go in
      and rewrite their code later — or lacking clarity: they’re not clear on
      what’s expected of them; they’re not clear on who the stakeholders are;
      they’re not clear on what “done” looks like.

  +slide
    h3(style="margin-bottom: 0; font-size: 180%") A good process creates
      span(style="display: block; margin-top: 0.05em; font-size: 210%")
        em confidence
        span(style="font-size: 118%") &amp; 
          em clarity
    h4.no-margin 
      span.fragment + #[em autonomy] 
      span.fragment + #[em trust] 
      span.fragment + #[em ownership] 
      span.fragment + #[em safety]
      br
      span.fragment + other buzzwords meaning “happy team”
    
    aside.notes.
      When a team feels confident, they can act without feeling like they need
      to seek approval — and that’s a good thing, because the parameters for
      what someone can do without approval are clearly defined in the process.
      Since the goals and accountability chains are crystal clear, no one needs
      to wonder where to start or what to work on next. This leads to a team of
      people who trust each other because the proper guard rails are in place.
      And because there’s trust, team members feel real ownership in the
      projects and process: they have a voice, and that voice is being heard.
      And because the process defines what is and isn’t acceptable, the whole
      team can feel safe to bring up potential issues. Usually, though, a good
      process means the issues get caught #[em way] earlier, before they become
      huge problems. All of this leads to the kind of high-collaboration,
      high-functioning environment every management consultant dreams about.

  +slide
    h3(style="font-size: 180%") A good process creates
      span(style="display: block; margin-top: 0.05em; font-size: 145%")
        em stronger teams
    ul
      li.fragment No one is a bottleneck
      li.fragment Each dev can make decisions independently
      li.fragment Knowledge is shared and documented
      li.fragment No chaos if devs take vacation, get promoted, or quit

  +slide
    h1(style="font-size: 360%") How can we
      em(style="display: block; font-size: 180%") create
      span(style="display: block; font-size: 73%; line-height: 0.8") solid processes?

  +slide
    h3(style="font-size: 180%") A good process needs
    ul
      li.fragment Excellent onboarding and documentation
      li.fragment Ongoing internal education and training
      li.fragment Frequent code reviews and coaching
      li.fragment Comprehensive test suites
      li.fragment Internally consistent style and quality guidelines

    aside.notes.
      A high-functioning team’s process will be so solid that new team members
      are basically painting by numbers to get started. A good measuring stick
      for this is whether or not you can get a new hire up and running fast
      enough to have them commit non-trivial code to production on the first
      day. The team should be documenting any repeatable process so it can be
      quickly referenced by everyone else. This gets driven home by solid
      coaching, and the best practices are enforced by comprehensive test suites
      and a set of guidelines for code style and quality.

  +slide
    h1(style="font-size: 290%") “I’ve tried this!
      strong(style="display: block; font-size: 222%") No one
      span(style="font-size: 120%") will listen!”

    aside.notes.
      I know, I just said all of the worst things. Even the most
      well-intentioned teams typically try and fail to adopt things like
      documentation. It might work for a while, but then it gets busy, or people
      get comfortable and forget, and ultimately the team’s best practices
      become more theoretical than practical.

  +slide
    h2(style="font-size: 300%") Why processes
      strong(style="display: block; font-size: 383%") fail

  +slide
    h1(style="font-size: 670%") Know
      small(style="display: block; color: inherit; font-size: 45%; line-height: 0.7; margin-bottom: 0.125em") vs
      em(style="font-size: 145%") feel
  
  +slide
    h3 The Rider and The Elephant
    figure
      img(
        src="./images/make-the-right-thing-the-easy-thing/rider-elephant.jpg"
        alt="The elephant and the rider, by Kristin Noelle."
      )
      figcaption Credit: 
        a(href="https://www.etsy.com/shop/SacredLoom") Kristin Noelle

    aside.notes.
      Chip and Dan Heath have written extensively about behavioral change, and a
      concept they use frequently is “the elephant and the rider”. We’re all
      pretty rational and capable of thinking through long-term benefits —
      that’s the rider. But there’s this other set of urges that frequently
      overpower our rationality in favor of instant gratification — that’s
      the elephant.
  
  +slide
    img.no-border(
      src="./images/make-the-right-thing-the-easy-thing/book-switch.png"
      alt="Book cover for Switch, by Chip and Dan Heath."
    )

    aside.notes.
      This is a concept that’s explored deeply in their book, #[em Switch],
      which I’d highly recommend reading.
  
  +slide
    h2(style="font-size: 204%") Make the Right Thing
      em(style="display: block; font-size: 147%") The Easy Thing
    h4
      span.fragment By focusing on four core values:
      br
      em.fragment Emotional Rewards 
      span.fragment + 
        em Automation
      br
      span.fragment + 
        em Simplification 
      span.fragment + 
        em Yak Shaving

    aside.notes.
      Being right isn’t enough. If we could solve human problems with logic,
      there wouldn’t be any problems. The rider can only take us so far; if we
      want to make real, lasting change, we need to appeal to the elephant. This
      means that we need to make any new processes more emotionally rewarding
      than the old way of doing things.
  
  +slide
    h3(style="font-size: 200%; text-align: left")
      em(style="display: inline-block; vertical-align: middle; width: 1.2ch; font-size: 160%; text-align: center") E
      | motional Rewards
      br
      span.fragment
        em(style="display: inline-block; vertical-align: middle; width: 1.2ch; font-size: 160%; text-align: center") A
        | utomation
      br
      span.fragment
        em(style="display: inline-block; vertical-align: middle; width: 1.2ch; font-size: 160%; text-align: center") S
        | implification
      br
      span.fragment
        em(style="display: inline-block; vertical-align: middle; width: 1.2ch; font-size: 160%; text-align: center") Y
        | ak Shaving
  
  +slide
    h4(style="margin-bottom: 0.125em") Make the Right Thing the Easy Thing: part 1
    h1.no-margin
      em(style="font-size: 120%") Emotional
        span(style="font-size: 125%; line-height: 0.75") Rewards
    ul
      li.fragment Less effort required to do things the new way
      li.fragment Immediate praise and positive feedback
      li.fragment Public recognition and gratitude
    
    aside.notes.
      One of the most rewarding things is to make people more efficient — it
      feels really good to do great work ahead of schedule, so we should try to
      make sure that every process we introduce feels like an upgrade. Some
      processes require extra work, though, so we should make sure to frequently
      and immediately praise great work from the team. When someone follows the
      process, reinforce that behavior by thanking them personally. Remember, it
      never sucks to hear you’re doing a good job, and usually we have to live
      with “no news is good news”; offer positive feedback early and often. When
      there’s a team meeting or a company all-hands, recognize the team publicly
      for doing good work. It’s a small effort, but it goes a long way.
  
  +slide
    blockquote.photo-quote
      .photo
        img(
          src="./images/make-the-right-thing-the-easy-thing/marisa.jpg"
          alt="Marisa Morby"
        )
      .quote
        p “Very few things at work feel better than the validation of other people praising your contributions in public.”
          strong Marisa Morby
            small Product Manager, Gatsby
    
    aside.notes.
      We often don’t give people praise because it feels weird to compliment
      people. And maybe we’re more intrinsically motivated and don’t place the
      same importance on validation, but here’s the thing: telling someone they
      did a good job when you see good work #[em never] hurts; #[em not] telling
      someone they did a good job can potentially lead to them feeling like
      they’re doing poorly. [Tell Marisa and Mike story.]

  +slide
    blockquote.photo-quote
      .photo
        img(
          src="./images/jason-lengstorf.jpg"
          alt="Jason Lengstorf."
        )
      .quote
        p “It doesn’t matter how objectively correct your solution is; it only matters if people will use it.”
        strong Me, just now
    
    aside.notes.

  +slide
    h4(style="margin-bottom: 0.125em") Make the Right Thing the Easy Thing: part 2
    h1.no-margin
      em(style="font-size: 105%") Automation
    ul
      li.fragment Set up CI/CD (e.g. Travis, Jenkins) for tests
      li.fragment Run and commit Prettier automatically
      li.fragment Use ESLint, Danger.js, etc. to catch quality issues
      li.fragment Automate code coverage checks
      li.fragment Use semantic-release for versioning and releases
    
    aside.notes.
      Automation is a great way to hit that efficiency emotional reward. Take
      something that sucks (like deploying and testing changes) and automate it.
      Once the automation is in place, it’s relatively easy to extend the
      automation to do more things, like automatically fix style issues, check
      for known anti-patterns with ESLint, check for internal issues using
      something like Danger.js, enforce code coverage standards, or even
      automatically deploy new versions of your app.
  
  +slide
    h2(style="font-size: 250%")
      span(style="font-size: 130%") Don’t fail on
      em(style="display: block; font-size: 320%; line-height: 0.8") style
      span.fragment Just #[span.underlined use Prettier]
    
    aside.notes.
      A surefire way to undermine any automated process is to make it nitpicky.
      Don’t fail a PR on something like missing semicolons or formatting; just
      run Prettier and autocommit the result to the PR. If team members have to
      jump through annoying hoops to appease the automations, they WILL find a
      way to work around them (like prettierignore).

  +slide
    h4.no-margin Tired:
    h1 Code 
      strong Cops
    h1 👮‍♀️ 👮🏽‍♂️
    
    aside.notes.
      Earlier, I talked about how it’s not glamorous to be the team’s auditor.
      Most of that comes from the fact that it sucks to have to follow people
      around and hassle them about things like code style, test coverage, and
      other things that we all know we should be doing, but often get lazy
      about. Being the team’s code cop starts to feel a lot like being a parent
      nagging your kids to clean their rooms.
  
  +slide
    h4.no-margin Wired:
    h1 Code 
      em Bots
    h1 🤖 🤖

    aside.notes.
      However, if we can get a robot in there to do the nagging, it gets a lot
      easier. There’s nothing emotional or judgmental about an automated
      process — no one’s code gets preferential treatment, and the rules are
      exactly the same for everyone, regardless of experience or title. Plus, no
      one needs to be the auditor; the things the team decides are important get
      checked consistently and automatically every single time someone opens a
      PR. This practice alone will avoid mountains of technical debt.

  +slide
    h4(style="margin-bottom: 0.125em") Make the Right Thing the Easy Thing: part 3
    h1.no-margin
      em(style="font-size: 92%") Simplification
    ul
      li.fragment Consider onboarding and training costs of new tools
      li.fragment Use open source tools if a stable option exists
      li.fragment Write code that’s small and easy to delete
      li.fragment Build for now, not 5 years into the future
  
    aside.notes.
      It can be tempting to build a project in, say, React, and then start
      adding tools: Redux, Thunk, Sagas, Recompose, and so on. But each of those
      tools adds extra complexity and cognitive overhead for the team. Don’t add
      a tool until you’ve got a real reason. If you definitely need a tool, look
      for a well-documented, stable, open source tool first; building stuff
      in-house means someone internal is on the hook to document, maintain, and
      support it, and that’s rarely a sustainable option for utilities. And
      don’t try to predict the future; code is a relatively short-lived product,
      so trying to build something “future-proof” is a bit of a fool’s errand.
      Code with deletion and replacement in mind, not infinite flexibility
      and scalability.

  +slide
    blockquote.photo-quote
      .photo
        img(
          src="./images/make-the-right-thing-the-easy-thing/jem-young.jpg"
          alt="Jem Young."
        )
      .quote
        p “Weigh the trade-offs and choose the thing that makes your team more productive.”
        strong Jem Young
          small Senior Software Engineer, Netflix

    aside.notes.
      Everything we do in our codebase has trade-offs. Jem recommends basing
      each decision on what will make the team most productive, even if that
      means skipping a tool that might logically be “more correct” because it’s
      too complicated to easily train the rest of the team.

  +slide
    blockquote.photo-quote
      .photo
        img(
          src="./images/make-the-right-thing-the-easy-thing/chris-biscardi.jpg"
          alt="Chris Biscardi."
        )
      .quote
        p(style="font-size: 78%") “Premature optimization can be a violent source of tech debt. If you have experience and know it’s the right move, great. Otherwise: keep it as simple as possible for as long as possible.”
        strong Chris Biscardi
          small Software Engineer, Honeycomb
    
    aside.notes.
      In the spirit of trade-offs, “future-proofing” an app is making a
      trade-off. Adding a ton of “maybe we’ll need this someday” options is
      extra complexity now that may never actually be useful. But we also
      shouldn’t completely ignore the future when designing our projects — our
      job as lead developers is to find the right balance of keeping people
      productive now without ending up with tomorrow’s legacy nightmare. One way
      to do this is to emphasize writing easy-to-delete code: few dependencies,
      small size, and no side-effects.

  +slide
    h4(style="margin-bottom: 0.125em") Make the Right Thing the Easy Thing: part 4
    h1.no-margin
      em(style="font-size: 108%") Yak Shaving
    ul
      li.fragment Limit the team’s exposure to yak shaving
      li.fragment Invest in your technical foundation
      li.fragment Create zero- or low-config dev environments
    
    aside.notes.
      Probably the most important point, in my humble opinion, is to limit your
      team’s exposure to yak-shaving, which is all the terrible busywork we have
      to do #[em before] we can do our actual work. This means investing in our
      tech foundation to create solid dev environments and tooling to eliminate
      the need to do a ton of work just so they can start working.

  +slide
    h3 Don’t make people do a bunch of work before they can start working

    aside.notes.
      Yak shaving means all the work you have to do before you can start
      actually working. For example, if you need to mow the lawn, but you
      realize the lawn mower is out of gas, then discover that your gas can has
      a hole in it, you now have to go to the hardware store, then the gas
      station, all before you can even #[em begin] doing the original task.
      I can’t stress enough how important it is to invest in your team’s
      technical foundation. [Straw poll: how many of you lose at least an hour a
      week to fighting your dev environment (e.g. build tools, local envs,
      containers, deployment)?] [Tell IBM NGINX story.]
  
  +slide
    h3(style="font-size: 139%") 2 hrs/week 
      span.fragment &times; 20 devs 
      span.fragment &times; $75k/year
      strong.fragment(style="display: block; font-size: 455%; line-height: 1") $75,000
      span.fragment(style="font-size: 133%") burned on yak shaving
    
    aside.notes.
      If anyone tries to argue that working on the foundation doesn’t have
      anything to do with business needs, show them this math. Assuming a dev
      team of 20 people and using Glassdoor info for a salary baseline, just
      #[em two hours a week] of time spent on yak shaving costs $75,000 dollars.
      That’s an entire additional salary wasted on tasks that aren’t actually
      related to the company’s goals.

  +slide.light-text.dim(
    data-background-image="./images/make-the-right-thing-the-easy-thing/dumpster-fire.gif"
  )
    h2 Don’t ask people to 
      span.underlined(style="display: block; font-size: 204%; line-height: 0.9") fix a mess
    
    aside.notes.
      Another reason to focus on the foundation is that we can enforce cultural
      norms through our boilerplates. If we provide a boilerplate with all the
      best practices baked into it, we’re changing the psychology of how our
      team interacts with our codebase. Instead of handing our team a blank
      slate (or worse, a pile of spaghetti code) and then asking them to fix it
      so it follows our team standards...

  +slide.light-text.dim(
    data-background-image="./images/make-the-right-thing-the-easy-thing/alley-oop.gif"
  )
    h2(style="font-size: 300%") Set them up to
      span.underlined(style="display: block; font-size: 187%; line-height: 0.9") succeed
    
    aside.notes.
      ...we should work to hand them well-built, thoroughly tested starters and
      boilerplates that already meet our standards. That way, all they have to
      do is keep it healthy and worry about #[em new] code. This appeals to our
      subconscious desire to keep nice things nice, and it helps steer the
      elephant in the direction of doing things The Right Way. We’re giving them
      the best possible chance of doing something awesome, demonstrated on this
      slide by these gentlemen playing sportsball.

  +slide
    h1(style="font-size: 470%") What is a 
      em(style="display: block; font-size: 200%") Lead
      span(style="display: block; line-height: 0.65; font-size: 84%") Developer?

  +slide
    h2(style="font-size: 190%;") A lead developer 
      strong isn’t
    ul
      li.fragment Carrying their team by doing most of the work
      li.fragment Inserting themself into every code decision
      li.fragment Single-handedly enforcing the team’s style guide

  +slide
    h2(style="font-size: 190%;") A lead developer 
      em is
    ul
      li.fragment Creating guard rails to encourage best practices
      li.fragment Defining processes to create confidence and clarity
      li.fragment Removing bottlenecks and knowledge silos

  +slide
    h2.no-margin Lead Developers
    h3.no-margin Design processes that are 
      span.underlined emotionally rewarding

  +slide
    h2.no-margin Lead Developers
    h3.no-margin Improve consistency by 
      span.underlined Automating processes

  +slide
    h2.no-margin Lead Developers
    h3.no-margin Reduce training costs by 
      span.underlined simplifying workflows

  +slide
    h2.no-margin Lead Developers
    h3.no-margin Invest in the foundation to 
      span.underlined Prevent yak shaving

  +slide
    h2.no-margin Healthy Teams
    h3.no-margin Maintain a reasonable 
      span.underlined vacation tolerance

  +slide
    h2.no-margin Healthy Teams
    h3.no-margin Operate with high levels of 
      span.underlined confidence &amp; clarity

  +slide
    h2.no-margin Healthy Teams
    h3.no-margin Know their work is both 
      span.underlined recognized &amp; valued

  +slide
    h2.no-margin Healthy Teams
    h3.no-margin Feel confident in their 
      span.underlined autonomy &amp; safety

  +slide
    h2.no-margin Healthy Teams
    h3.no-margin Are not dependent on 
      span.underlined rockstar developers

  //- Q&A
  +slide
    h1.no-margin Thanks!
    img(
      src="./images/work-life-balance/jason-lengstorf.jpg"
      alt="Jason Lengstorf"
      style="display: block; background: #56453b; border-radius: 50%; width: 240px; min-width: 0; margin: 0 auto"
    )
    p(style="margin-top: 0.25rem;")= config.author.name
      br
      small
        | Follow me on Twitter: 
        a(href= `https://twitter.com/${config.author.twitter}`)= `@${config.author.twitter}`

  //- Resources
  +slide.u--align-left.resourcetext
    h4 Resources
    ol
      li
        a(href="https://youtu.be/zqdCM8zR6Mc").
          “But Testing Sucks!” — How to Build a Testing- and Quality-Driven Culture
      li
        a(href="http://heathbrothers.com/books/switch/").
          Switch by Chip and Dan Heath
      li
        a(href="https://bit.ly/script-toolboxes").
          Kent C. Dodds on Script Toolboxes
      li
        a(href="https://twitter.com/marisamorby").
          Marisa Morby on Twitter
      li
        a(href="https://twitter.com/JemYoung").
          Jem Young on Twitter
      li
        a(href="https://twitter.com/chrisbiscardi").
          Chris Biscardi on Twitter

block styles
  link(
    rel="stylesheet"
    href="//maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css"
  )
  script.
    (function(d) {
      var config = {
        kitId: 'fnr1orp',
        scriptTimeout: 3000,
        async: true
      },
      h=d.documentElement,t=setTimeout(function(){h.className=h.className.replace(/\bwf-loading\b/g,"")+" wf-inactive";},config.scriptTimeout),tk=d.createElement("script"),f=false,s=d.getElementsByTagName("script")[0],a;h.className+=" wf-loading";tk.src='https://use.typekit.net/'+config.kitId+'.js';tk.async=true;tk.onload=tk.onreadystatechange=function(){a=this.readyState;if(f||a&&a!="complete"&&a!="loaded")return;f=true;clearTimeout(t);try{Typekit.load(config)}catch(e){}};s.parentNode.insertBefore(tk,s)
    })(document);

block extras
  -
    const relatedAccounts = [config.author.twitter];
    
    if (config.conference.twitter) {
      relatedAccounts.push(config.conference.twitter);
    }

    // See https://dev.twitter.com/web/tweet-button/web-intent for parameters.
    const tweetObj = {
      text: `${config.title} by @${config.author.twitter}`,
      hashtags: config.conference.hashtag || '',
      related: relatedAccounts.join(','),
      url: config.slides.link,
    };

    // 
    const e = encodeURIComponent;
    const args = Object.keys(tweetObj).map(key => `${key}=${e(tweetObj[key])}`);
    const tweetUrl = `https://twitter.com/intent/tweet?${args.join('&')}`;
  -
  .hashtag
    p
      | Tweet: 
      a(
        href=tweetUrl
        target="_blank"
      ) @#{config.author.twitter} 
        | #{config.conference.hashtag ? `#${config.conference.hashtag}` : ''}
  footer
    ul.inline
      li
        | “#{config.title}” by 
        a(href= config.author.link)= config.author.name
        |  (slides: 
        a(href= config.slides.link)= config.slides.link.replace('https://', '')
        | )
      li
        a(href="https://twitter.com/"+config.author.twitter).
          @#{config.author.twitter}
      li
        a(href="https://github.com/"+config.author.github).
          github.com/#{config.author.github}
